// import React from 'react.development';
import LoadCheckout from './LoadCheckout.js';
import GeneralForm from './GeneralForm.js';
import ShippingForm from './ShippingForm.js';
import PaymentForm from './PaymentForm.js';
import CheckoutComplete from './CheckoutComplete.js';

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      formCounter: 0,
      name: '',
      email: '',
      password: '',
      cityState: '',
      zipCode: 0,
      phoneNumber: 0,
      creditCard: '',
      expirationDate: new Date(),
      cvv: 0,
      billingZipCode: 0
    };

    this.showNextForm = this.showNextForm.bind(this);
    this.updateUserData = this.updateUserData.bind(this);
    this.buildData = this.buildData.bind(this);

    this.components = [React.createElement(LoadCheckout, { showNext: this.showNextForm, updateUserData: this.updateUserData }), React.createElement(GeneralForm, { showNext: this.showNextForm, updateUserData: this.updateUserData }), React.createElement(ShippingForm, { showNext: this.showNextForm, updateUserData: this.updateUserData }), React.createElement(PaymentForm, { showNext: this.showNextForm, updateUserData: this.updateUserData }), React.createElement(CheckoutComplete, { showNext: this.showNextForm, buildData: this.buildData })];
  }

  showNextForm() {
    if (this.state.formCounter === this.components.length - 1) {
      this.setState({
        formCounter: 0
      });
    } else {
      this.setState({
        formCounter: this.state.formCounter + 1
      });
    }
  }

  updateUserData(propName, value) {
    this.setState({
      [propName]: value
    });
  }

  buildData() {
    let stateCopy = Object.create(this.state);
    let titles = ['General Information', 'Shipping Information', 'Payment Information'];
    let sections = [['name', 'email', 'password'], ['cityState', 'zipCode', 'phoneNumber'], ['creditCard', 'expirationDate', 'cvv', 'billingZipCode']];
    let names = [['Name', 'Email', 'Password'], ['Address', 'Zip Code', 'Phone Number'], ['Card Number', 'Expiry Date', 'CVV', 'Billing Zip Code']];
    return titles.map((title, i) => [title, sections[i].map((prop, k) => [names[i][k], stateCopy[prop]])]);
  }

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'header',
        { className: 'jumbotron' },
        React.createElement(
          'h1',
          { className: 'display-3 text-center' },
          'Checkout Experience'
        )
      ),
      React.createElement(
        'main',
        { className: 'container' },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-8 m-auto' },
            React.createElement(
              'div',
              { className: 'center-content vh-60' },
              this.components[this.state.formCounter]
            )
          )
        )
      )
    );
  }
}

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9BcHAuanN4Il0sIm5hbWVzIjpbIkxvYWRDaGVja291dCIsIkdlbmVyYWxGb3JtIiwiU2hpcHBpbmdGb3JtIiwiUGF5bWVudEZvcm0iLCJDaGVja291dENvbXBsZXRlIiwiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJmb3JtQ291bnRlciIsIm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiY2l0eVN0YXRlIiwiemlwQ29kZSIsInBob25lTnVtYmVyIiwiY3JlZGl0Q2FyZCIsImV4cGlyYXRpb25EYXRlIiwiRGF0ZSIsImN2diIsImJpbGxpbmdaaXBDb2RlIiwic2hvd05leHRGb3JtIiwiYmluZCIsInVwZGF0ZVVzZXJEYXRhIiwiYnVpbGREYXRhIiwiY29tcG9uZW50cyIsImxlbmd0aCIsInNldFN0YXRlIiwicHJvcE5hbWUiLCJ2YWx1ZSIsInN0YXRlQ29weSIsIk9iamVjdCIsImNyZWF0ZSIsInRpdGxlcyIsInNlY3Rpb25zIiwibmFtZXMiLCJtYXAiLCJ0aXRsZSIsImkiLCJwcm9wIiwiayIsInJlbmRlciIsIlJlYWN0RE9NIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxZQUFQLE1BQXlCLG1CQUF6QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixtQkFBekI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGtCQUF4QjtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLHVCQUE3Qjs7QUFFQSxNQUFNQyxHQUFOLFNBQWtCQyxNQUFNQyxTQUF4QixDQUFrQztBQUNoQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOOztBQUVBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxtQkFBYSxDQURGO0FBRVhDLFlBQU0sRUFGSztBQUdYQyxhQUFPLEVBSEk7QUFJWEMsZ0JBQVUsRUFKQztBQUtY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QTtBQUFBO0FBREYsT0FERjtBQUlFO0FBQUE7QUFBQSxVQUFNLFdBQVUsV0FBaEI7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLEtBQWY7QUFDRTtBQUFBO0FBQUEsY0FBSyxXQUFVLGNBQWY7QUFDRTtBQUFBO0FBQUEsZ0JBQUssV0FBVSxzQkFBZjtBQUNHLG1CQUFLaEIsVUFBTCxDQUFnQixLQUFLakIsS0FBTCxDQUFXQyxXQUEzQjtBQURIO0FBREY7QUFERjtBQURGO0FBSkYsS0FERjtBQWdCRDtBQTFFK0I7O0FBNkVsQ2lDLFNBQVNELE1BQVQsQ0FBZ0Isb0JBQUMsR0FBRCxPQUFoQixFQUF5QkUsU0FBU0MsY0FBVCxDQUF3QixLQUF4QixDQUF6QiIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QuZGV2ZWxvcG1lbnQnO1xuaW1wb3J0IExvYWRDaGVja291dCBmcm9tICcuL0xvYWRDaGVja291dC5qcyc7XG5pbXBvcnQgR2VuZXJhbEZvcm0gZnJvbSAnLi9HZW5lcmFsRm9ybS5qcyc7XG5pbXBvcnQgU2hpcHBpbmdGb3JtIGZyb20gJy4vU2hpcHBpbmdGb3JtLmpzJztcbmltcG9ydCBQYXltZW50Rm9ybSBmcm9tICcuL1BheW1lbnRGb3JtLmpzJztcbmltcG9ydCBDaGVja291dENvbXBsZXRlIGZyb20gJy4vQ2hlY2tvdXRDb21wbGV0ZS5qcyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZvcm1Db3VudGVyOiAwLFxuICAgICAgbmFtZTogJycsXG4gICAgICBlbWFpbDogJycsXG4gICAgICBwYXNzd29yZDogJycsXG4gICAgICBjaXR5U3RhdGU6ICcnLFxuICAgICAgemlwQ29kZTogMCxcbiAgICAgIHBob25lTnVtYmVyOiAwLFxuICAgICAgY3JlZGl0Q2FyZDogJycsXG4gICAgICBleHBpcmF0aW9uRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgIGN2djogMCxcbiAgICAgIGJpbGxpbmdaaXBDb2RlOiAwXG4gICAgfTtcblxuICAgIHRoaXMuc2hvd05leHRGb3JtID0gdGhpcy5zaG93TmV4dEZvcm0uYmluZCh0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVVzZXJEYXRhID0gdGhpcy51cGRhdGVVc2VyRGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYnVpbGREYXRhID0gdGhpcy5idWlsZERhdGEuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuY29tcG9uZW50cyA9IFtcbiAgICAgIDxMb2FkQ2hlY2tvdXQgc2hvd05leHQ9e3RoaXMuc2hvd05leHRGb3JtfSB1cGRhdGVVc2VyRGF0YT17dGhpcy51cGRhdGVVc2VyRGF0YX0gLz4sXG4gICAgICA8R2VuZXJhbEZvcm0gc2hvd05leHQ9e3RoaXMuc2hvd05leHRGb3JtfSB1cGRhdGVVc2VyRGF0YT17dGhpcy51cGRhdGVVc2VyRGF0YX0gLz4sXG4gICAgICA8U2hpcHBpbmdGb3JtIHNob3dOZXh0PXt0aGlzLnNob3dOZXh0Rm9ybX0gdXBkYXRlVXNlckRhdGE9e3RoaXMudXBkYXRlVXNlckRhdGF9IC8+LFxuICAgICAgPFBheW1lbnRGb3JtIHNob3dOZXh0PXt0aGlzLnNob3dOZXh0Rm9ybX0gdXBkYXRlVXNlckRhdGE9e3RoaXMudXBkYXRlVXNlckRhdGF9IC8+LFxuICAgICAgPENoZWNrb3V0Q29tcGxldGUgc2hvd05leHQ9e3RoaXMuc2hvd05leHRGb3JtfSBidWlsZERhdGE9e3RoaXMuYnVpbGREYXRhfSAvPlxuICAgIF07XG4gIH1cblxuICBzaG93TmV4dEZvcm0oKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuZm9ybUNvdW50ZXIgPT09IHRoaXMuY29tcG9uZW50cy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9ybUNvdW50ZXI6IDBcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb3JtQ291bnRlcjogdGhpcy5zdGF0ZS5mb3JtQ291bnRlciArIDFcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVXNlckRhdGEocHJvcE5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbcHJvcE5hbWVdOiB2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgYnVpbGREYXRhKCkge1xuICAgIGxldCBzdGF0ZUNvcHkgPSBPYmplY3QuY3JlYXRlKHRoaXMuc3RhdGUpO1xuICAgIGxldCB0aXRsZXMgPSBbJ0dlbmVyYWwgSW5mb3JtYXRpb24nLCAnU2hpcHBpbmcgSW5mb3JtYXRpb24nLCAnUGF5bWVudCBJbmZvcm1hdGlvbiddO1xuICAgIGxldCBzZWN0aW9ucyA9IFtbJ25hbWUnLCAnZW1haWwnLCAncGFzc3dvcmQnXSwgWydjaXR5U3RhdGUnLCAnemlwQ29kZScsICdwaG9uZU51bWJlciddLCBbJ2NyZWRpdENhcmQnLCAnZXhwaXJhdGlvbkRhdGUnLCAnY3Z2JywgJ2JpbGxpbmdaaXBDb2RlJ11dO1xuICAgIGxldCBuYW1lcyA9IFtbJ05hbWUnLCAnRW1haWwnLCAnUGFzc3dvcmQnXSwgWydBZGRyZXNzJywgJ1ppcCBDb2RlJywgJ1Bob25lIE51bWJlciddLCBbJ0NhcmQgTnVtYmVyJywgJ0V4cGlyeSBEYXRlJywgJ0NWVicsICdCaWxsaW5nIFppcCBDb2RlJ11dXG4gICAgcmV0dXJuIHRpdGxlcy5tYXAoKHRpdGxlLCBpKSA9PiBbdGl0bGUsIHNlY3Rpb25zW2ldLm1hcCgocHJvcCwgaykgPT4gW25hbWVzW2ldW2tdLCBzdGF0ZUNvcHlbcHJvcF1dKV0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImp1bWJvdHJvblwiPlxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTMgdGV4dC1jZW50ZXJcIj5DaGVja291dCBFeHBlcmllbmNlPC9oMT5cbiAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgIDxtYWluIGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC04IG0tYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbnRlci1jb250ZW50IHZoLTYwXCI+XG4gICAgICAgICAgICAgICAge3RoaXMuY29tcG9uZW50c1t0aGlzLnN0YXRlLmZvcm1Db3VudGVyXX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9tYWluPlxuICAgICAgPC9kaXYgPlxuICAgICk7XG4gIH1cbn1cblxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7Il19